{
        "New function": {
        "prefix": "def",
        "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
        "description" : "Code snippet for function definition."
    },
    "New async function": {
        "prefix": "adef",
        "body": "async def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
        "description" : "Code snippet for async function definition."
    },
    "New property": {
        "prefix": "property",
        "body": "@property\ndef ${1:foo}(self):\n    \"\"\"${2:The $1 property.}\"\"\"\n    ${3:return self._$1}\n@${4:$1}.setter\ndef ${5:$1}(self, value):\n    ${6:self._$1} = value",
        "description": "New property: get and set via decorator"
    },
    "New froperty": {
        "prefix": "property",
        "body": "def ${1:foo}():\n    doc = \"${2:The $1 property.}\"\n    def fget(self):\n        ${3:return self._$1}\n    def fset(self, value):\n        ${4:self._$1 = value}\n    def fdel(self):\n        ${5:del self._$1}\n    return locals()\n$1 = property(**$1())$0",
        "description" : ""
    },
    "New enum": {
        "prefix": "enum",
        "body": [
            "from enum import Enum\n\n",
            "class ${1:MyEnum}(Enum):",
            "\t\"\"\"${2:Docstring for $1.}\"\"\"",
            "\t${3:FIRST_ENUM} = \"some_value\"",
            "\t${4:SECOND_ENUM} = \"some_other_value\"",
            "\t$0"
        ],
        "description": "Code snippet for enum definition."
    },
    "if": {
        "prefix": "if",
        "body": "if ${1:condition}:\n\t${2:pass}$0",
        "description" : "Code snippet for the if statement."
    },
    "for": {
        "prefix": "for",
        "body": "for ${1:value} in ${2:iterable}:\n\t${3:pass}$0",
        "description" : "Code snippet to create a for loop structure."
    },
    "while": {
        "prefix": "while",
        "body": "while ${1:condition}:\n\t${2:pass}$0",
        "description" : "Code snippet to create a while loop structure."
    },
    "dowhile": {
        "prefix": "dowhile",
        "body": "do = True\nwhile do or ${2:condition}:\n\tdo = False\n\t${1:body}$0",
        "description" : "Code snippet to create a do-while loop structure."
    },
    "try:except:": {
        "prefix": "try",
        "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}$0",
        "description" : "Code Snippet for a try and except blocks."
    },
    "try:except:else:finally": {
        "prefix": "tryef",
        "body": "try:\n\t${1:pass}\nexcept${2: ${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t${6:pass}\nfinally:\n\t${7:pass}$0",
        "description" : "Code Snippet for a try/except/finally with else statement."
    },
    "try:except:else": {
        "prefix": "trye",
        "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5:pass}$0",
        "description" : "Code Snippet for a try/except with else statement."
    },
    "try:except:finally": {
        "prefix": "tryf",
        "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}$0",
        "description" : "Code Snippet for a try/except/finally."
    },
    "self": {
        "prefix": "s",
        "body": "self.$0",
        "description" : "Shortend snippet to reference the self property in an object."
    },
    "__magic__": {
        "prefix": "__",
        "body": "__${1:init}__$0",
        "description" : "Code snippet to create magic methods."
    },
    "if __name__ == \"__main__\"": {
        "prefix": "ifmain",
        "body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
        "description" : "Create implicitly all the code at the top level using the __name__ special variable."
    },
    "lambda": {
        "prefix": "lam",
        "body": "lambda ${1:args}: ${2:expr}",
        "description": "Create template for lambda function"
    }
}
